// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pdfpb/pdf.proto

package pdfpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UploadStatus int32

const (
	UploadStatus_Good UploadStatus = 0
	UploadStatus_Fail UploadStatus = 1
	UploadStatus_Done UploadStatus = 2
)

var UploadStatus_name = map[int32]string{
	0: "Good",
	1: "Fail",
	2: "Done",
}
var UploadStatus_value = map[string]int32{
	"Good": 0,
	"Fail": 1,
	"Done": 2,
}

func (x UploadStatus) String() string {
	return proto.EnumName(UploadStatus_name, int32(x))
}
func (UploadStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_pdf_fd93e6268dc3025a, []int{0}
}

type PDFSendRequest struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PDFSendRequest) Reset()         { *m = PDFSendRequest{} }
func (m *PDFSendRequest) String() string { return proto.CompactTextString(m) }
func (*PDFSendRequest) ProtoMessage()    {}
func (*PDFSendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pdf_fd93e6268dc3025a, []int{0}
}
func (m *PDFSendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PDFSendRequest.Unmarshal(m, b)
}
func (m *PDFSendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PDFSendRequest.Marshal(b, m, deterministic)
}
func (dst *PDFSendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PDFSendRequest.Merge(dst, src)
}
func (m *PDFSendRequest) XXX_Size() int {
	return xxx_messageInfo_PDFSendRequest.Size(m)
}
func (m *PDFSendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PDFSendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PDFSendRequest proto.InternalMessageInfo

func (m *PDFSendRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type PDFSendResponse struct {
	Message              string       `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Code                 UploadStatus `protobuf:"varint,2,opt,name=Code,proto3,enum=pdfRequest.UploadStatus" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PDFSendResponse) Reset()         { *m = PDFSendResponse{} }
func (m *PDFSendResponse) String() string { return proto.CompactTextString(m) }
func (*PDFSendResponse) ProtoMessage()    {}
func (*PDFSendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pdf_fd93e6268dc3025a, []int{1}
}
func (m *PDFSendResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PDFSendResponse.Unmarshal(m, b)
}
func (m *PDFSendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PDFSendResponse.Marshal(b, m, deterministic)
}
func (dst *PDFSendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PDFSendResponse.Merge(dst, src)
}
func (m *PDFSendResponse) XXX_Size() int {
	return xxx_messageInfo_PDFSendResponse.Size(m)
}
func (m *PDFSendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PDFSendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PDFSendResponse proto.InternalMessageInfo

func (m *PDFSendResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PDFSendResponse) GetCode() UploadStatus {
	if m != nil {
		return m.Code
	}
	return UploadStatus_Good
}

func init() {
	proto.RegisterType((*PDFSendRequest)(nil), "pdfRequest.PDFSendRequest")
	proto.RegisterType((*PDFSendResponse)(nil), "pdfRequest.PDFSendResponse")
	proto.RegisterEnum("pdfRequest.UploadStatus", UploadStatus_name, UploadStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PDFServiceClient is the client API for PDFService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PDFServiceClient interface {
	SendFile(ctx context.Context, opts ...grpc.CallOption) (PDFService_SendFileClient, error)
}

type pDFServiceClient struct {
	cc *grpc.ClientConn
}

func NewPDFServiceClient(cc *grpc.ClientConn) PDFServiceClient {
	return &pDFServiceClient{cc}
}

func (c *pDFServiceClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (PDFService_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PDFService_serviceDesc.Streams[0], "/pdfRequest.PDFService/SendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &pDFServiceSendFileClient{stream}
	return x, nil
}

type PDFService_SendFileClient interface {
	Send(*PDFSendRequest) error
	Recv() (*PDFSendResponse, error)
	grpc.ClientStream
}

type pDFServiceSendFileClient struct {
	grpc.ClientStream
}

func (x *pDFServiceSendFileClient) Send(m *PDFSendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pDFServiceSendFileClient) Recv() (*PDFSendResponse, error) {
	m := new(PDFSendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PDFServiceServer is the server API for PDFService service.
type PDFServiceServer interface {
	SendFile(PDFService_SendFileServer) error
}

func RegisterPDFServiceServer(s *grpc.Server, srv PDFServiceServer) {
	s.RegisterService(&_PDFService_serviceDesc, srv)
}

func _PDFService_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PDFServiceServer).SendFile(&pDFServiceSendFileServer{stream})
}

type PDFService_SendFileServer interface {
	Send(*PDFSendResponse) error
	Recv() (*PDFSendRequest, error)
	grpc.ServerStream
}

type pDFServiceSendFileServer struct {
	grpc.ServerStream
}

func (x *pDFServiceSendFileServer) Send(m *PDFSendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pDFServiceSendFileServer) Recv() (*PDFSendRequest, error) {
	m := new(PDFSendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PDFService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pdfRequest.PDFService",
	HandlerType: (*PDFServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFile",
			Handler:       _PDFService_SendFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pdfpb/pdf.proto",
}

func init() { proto.RegisterFile("pdfpb/pdf.proto", fileDescriptor_pdf_fd93e6268dc3025a) }

var fileDescriptor_pdf_fd93e6268dc3025a = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x97, 0x31, 0xdd, 0x7c, 0x8c, 0xad, 0xe4, 0x14, 0xe6, 0x65, 0xf4, 0x54, 0xc6, 0xa8,
	0x32, 0xff, 0x03, 0x37, 0x2a, 0x1e, 0x04, 0xc9, 0x10, 0xd1, 0x5b, 0x6a, 0x5e, 0xa5, 0x50, 0xf2,
	0x62, 0x93, 0xfa, 0xf7, 0x4b, 0xa2, 0xd5, 0x0a, 0xbb, 0xbd, 0x1f, 0x1f, 0xf8, 0xfe, 0x80, 0xa5,
	0xd5, 0x95, 0x2d, 0xaf, 0xac, 0xae, 0x72, 0xdb, 0x92, 0x27, 0x0e, 0x56, 0x57, 0x12, 0x3f, 0x3a,
	0x74, 0x3e, 0xdd, 0xc0, 0xe2, 0xf1, 0x50, 0x1c, 0xd1, 0xe8, 0x9f, 0x0b, 0x17, 0x30, 0xdd, 0x93,
	0xf1, 0x68, 0xbc, 0x60, 0x6b, 0x96, 0xcd, 0x65, 0xbf, 0xa6, 0x2f, 0xb0, 0xfc, 0x65, 0x9d, 0x25,
	0xe3, 0x30, 0xc0, 0x0f, 0xe8, 0x9c, 0x7a, 0xc7, 0x08, 0x5f, 0xc8, 0x7e, 0xe5, 0x5b, 0x98, 0xec,
	0x49, 0xa3, 0x18, 0xaf, 0x59, 0xb6, 0xd8, 0x89, 0xfc, 0x4f, 0x33, 0x7f, 0xb2, 0x0d, 0x29, 0x7d,
	0xf4, 0xca, 0x77, 0x4e, 0x46, 0x6a, 0xb3, 0x85, 0xf9, 0xf0, 0xca, 0x67, 0x30, 0xb9, 0x23, 0xd2,
	0xc9, 0x28, 0x4c, 0x85, 0xaa, 0x9b, 0x84, 0x85, 0xe9, 0x40, 0x06, 0x93, 0xf1, 0xee, 0x19, 0x20,
	0x1a, 0x69, 0x3f, 0xeb, 0x37, 0xe4, 0xf7, 0x30, 0x0b, 0x9e, 0x8a, 0xba, 0x41, 0xbe, 0x1a, 0xea,
	0xfc, 0x0f, 0xb6, 0xba, 0x3c, 0xf9, 0xfb, 0x0e, 0x92, 0x8e, 0x32, 0x76, 0xcd, 0x6e, 0xa7, 0xaf,
	0x67, 0xb1, 0xac, 0xf2, 0x3c, 0x36, 0x75, 0xf3, 0x15, 0x00, 0x00, 0xff, 0xff, 0x14, 0xa3, 0xbf,
	0x08, 0x3c, 0x01, 0x00, 0x00,
}
